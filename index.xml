<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pablo Estigarribia&#39;s docs</title>
    <link>https://pablodav.github.io/</link>
    <description>Recent content on Pablo Estigarribia&#39;s docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license with content licensed with CC BY</copyright>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    
	<atom:link href="https://pablodav.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started</title>
      <link>https://pablodav.github.io/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://pablodav.github.io/getting-started/</guid>
      <description>Installation Installing Hugo Hugo itself is just a single binary without dependencies on expensive runtimes like Ruby, Python or PHP and without dependencies on any databases. You just need to download the latest version. For more information read the official installation guides.
Let&amp;rsquo;s make sure Hugo is set up as expected. You should see a similar version number in your terminal:
hugo version # Hugo Static Site Generator v0.15 BuildDate: 2016-01-03T12:47:47+01:00  Installing Material Next, assuming you have Hugo up and running the hugo-material-docs theme can be installed with git:</description>
    </item>
    
    <item>
      <title>Adding content</title>
      <link>https://pablodav.github.io/adding-material/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>https://pablodav.github.io/adding-material/</guid>
      <description>Hello world Let&amp;rsquo;s create our first content file for your documentation. Open a terminal and add the following command for each new file you want to add. Replace &amp;lt;section-name&amp;gt; with a general term that describes your document in detail.
hugo new &amp;lt;section-name&amp;gt;/filename.md  Visitors of your website will find the final document under www.example.com/&amp;lt;section-name&amp;gt;/filename/.
Since it&amp;rsquo;s possible to have multiple content files in the same section I recommend to create at least one index.</description>
    </item>
    
    <item>
      <title>Ansible Vault ES</title>
      <link>https://pablodav.github.io/es/post/ansible/ansible_help_vault/</link>
      <pubDate>Fri, 09 Jun 2017 20:06:24 -0300</pubDate>
      
      <guid>https://pablodav.github.io/es/post/ansible/ansible_help_vault/</guid>
      <description>Vault passwords Por seguridad utilizamos ansible-vault para guardar algunas contraseñas.
Referencias:
http://www.linuxsysadmin.tk/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html
http://docs.ansible.com/ansible/intro_windows.html
Estructura para uso de VAULT_FILE Utilizaremos archivos llamados SECRETS_XX, ej:
. ├── ansible.cfg ├── group_vars │ ├── all │ │ ├── credentials_sql │ │ ├── SECRETS_SQL  Los archivos @SECRETS_ALGO@ tienen las variables con las claves.
Variables definidas dentro de archivo @SECRETS_XX@ Las variables tendrán la nomenclatura:
VAULT_NOMBRE_VAR  De esta forma podemos utilizar la variable dentro de nuestras definiciones, en archivos no cifrados con vault para más facil acceso.</description>
    </item>
    
    <item>
      <title>Graylog2 - 3 - Logstash nagios_nsca</title>
      <link>https://pablodav.github.io/post/graylog/graylog_logstash_nagios_nsca/</link>
      <pubDate>Thu, 23 Mar 2017 10:54:25 -0300</pubDate>
      
      <guid>https://pablodav.github.io/post/graylog/graylog_logstash_nagios_nsca/</guid>
      <description>Introduction Here we will explain howto add notifications to nagios using Graylog and logstash.
In this case we will send 2 notifications:
 from Graylog using Streams and commands plugin. From Logstash using plugins-outpus-nagios-nsca  Requirements Have read both articles:
 Graylog_ansible Graylog_logstash_input  We need also 2 new roles to have in our ansible-control-machine.
We will use requirements.yml, and follow same steps: Graylog_ansible_installing_roles
So add these lines:
- src: https://github.</description>
    </item>
    
    <item>
      <title>Graylog2 - 2 - logstash input http</title>
      <link>https://pablodav.github.io/post/graylog/logstash_input/</link>
      <pubDate>Wed, 22 Mar 2017 14:37:48 -0300</pubDate>
      
      <guid>https://pablodav.github.io/post/graylog/logstash_input/</guid>
      <description>Introduction  Configure GELF input in graylog. Prepare logstash to input data from any http post. Send data to GELF input in graylog using plugins_output_gelf.  Requirements Ansible As explained in Generic-help installing roles. And at Graylog_ansible_installing_roles
We will use requirements.yml to add this:
- src: mrlesmithjr.logstash name: ansible-logstash version: master  Then install with ansible-galaxy install -r requirements.yml
It will install the role with name ansible-logstash, we will use that name in our playbook.</description>
    </item>
    
    <item>
      <title>Ansible win Update and Security patching</title>
      <link>https://pablodav.github.io/post/ansible_win/ansible_win_updates_patch_security/</link>
      <pubDate>Sat, 18 Mar 2017 20:06:24 -0300</pubDate>
      
      <guid>https://pablodav.github.io/post/ansible_win/ansible_win_updates_patch_security/</guid>
      <description>Updating windows with ansible Patching windows is a very time consuming task, but working with ansible you could reduce this time significantly.
Here I will share some playbooks that will help on these tasks.
First of all, you must ensure to keep all your windows servers updated:
--- # file: windows-updates-all.yml - hosts: all any_errors_fatal: false serial: - 1 - 5% - 25% max_fail_percentage: 10% vars: win_updates_categories: - CriticalUpdates - SecurityUpdates tasks: # Check if there are missing updates - name: Check for missing updates.</description>
    </item>
    
    <item>
      <title>Graylog2 - 1 - with ansible</title>
      <link>https://pablodav.github.io/post/graylog/graylog_ansible/</link>
      <pubDate>Tue, 14 Mar 2017 07:31:51 -0300</pubDate>
      
      <guid>https://pablodav.github.io/post/graylog/graylog_ansible/</guid>
      <description>Introduction Graylog2 is an excelent log management and server, with many features and nice GUI interface to use and configure streams, inputs, alerts, searchs, dashboards, etc.
This document will explain how setup graylog2 using ansible.
This document will be base for future documents that explain how to add more customizations with other roles:
 Upgrading practice example. Input from logstash. Done at: Graylog_ansible_logstash_input Receive azure alarms. Done at: Graylog_ansible_logstash_input Configure commands to send alarms to nagios with nsca.</description>
    </item>
    
    <item>
      <title>index</title>
      <link>https://pablodav.github.io/license/</link>
      <pubDate>Wed, 08 Mar 2017 23:01:27 -0300</pubDate>
      
      <guid>https://pablodav.github.io/license/</guid>
      <description>creative commons Attribution 4.0 International Creative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information.</description>
    </item>
    
  </channel>
</rss>